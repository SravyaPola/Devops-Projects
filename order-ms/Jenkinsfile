pipeline {
    agent any

    environment {
        IMAGE_NAME   = "order-ms"
        AWS_REGION   = "us-east-1"
        CLUSTER_NAME = "my-eks-cluster"   // adjust if needed
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build with Maven') {
            steps {
                dir('order-ms') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'dockerhub-creds',
                    usernameVariable: 'DOCKERHUB_USER',
                    passwordVariable: 'DOCKERHUB_PASS'
                )]) {
                    dir('order-ms') {
                        sh '''
                            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                            docker build -t $DOCKERHUB_USER/${IMAGE_NAME}:$BUILD_NUMBER .
                            docker push $DOCKERHUB_USER/${IMAGE_NAME}:$BUILD_NUMBER
                            docker tag $DOCKERHUB_USER/${IMAGE_NAME}:$BUILD_NUMBER $DOCKERHUB_USER/${IMAGE_NAME}:latest
                            docker push $DOCKERHUB_USER/${IMAGE_NAME}:latest
                            docker rmi $DOCKERHUB_USER/${IMAGE_NAME}:$BUILD_NUMBER || true
                        '''
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'aws-creds',
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) {
                    sh '''
                        # Configure kubectl for EKS
                        aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

                        # Deploy Kubernetes manifests
                        kubectl apply -f order-ms/k8s/deployment.yaml
                        kubectl apply -f order-ms/k8s/service.yaml

                        # Wait for rollout
                        kubectl rollout status deployment/${IMAGE_NAME}
                    '''
                }
            }
        }
    }
}
